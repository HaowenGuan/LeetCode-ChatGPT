{
 "0": [
  "s = input()\n\nif s.count('[') != 1 or s.count(']') != 1 or ':' not in s:\n    print(-1)\nelse:\n    left_bracket = s.index('[')\n    right_bracket = s.rindex(']')\n    colon_index = s.find(':', left_bracket, right_bracket)\n  \n    if colon_index == -1:\n        print(-1)\n    else:\n        vertical_lines = s.count('|', left_bracket, right_bracket)\n        print(vertical_lines + 4)"
 ],
 "1": [
  "x = int(input())\ns = str(x)\ndigits_sum = sum(int(d) for d in s)\nnum = int(\"9\"*(len(s)-1))\n\nif num > x:\n    print(int(\"9\"*(len(s)-2) + \"8\"))\nelse:\n    while sum(int(d) for d in str(num)) < digits_sum:\n        num -= 1\n    print(num)"
 ],
 "2": [
  "n = int(input())\nwhile True:\n    n += 1\n    if len(set(str(n))) <= 2:\n        print(n - int(input()))\n        break"
 ],
 "3": [
  "n,q = map(int, input().split())\npainters = []\nfor i in range(q):\n    l,r = map(int, input().split())\n    painters.append((l,r))\n\nmax_painted = 0\nfor i in range(q):\n    for j in range(i+1,q):\n        painted = [0]*n\n        for k in range(q):\n            if k == i or k == j:\n                continue\n            for s in range(painters[k][0]-1,painters[k][1]):\n                painted[s] = 1\n        max_painted = max(max_painted,sum(painted))\n\nprint(max_painted)"
 ],
 "4": [
  "x = int(input())\nhh, mm = map(int, input().split())\n\ncount = 0\nwhile True:\n    if '7' in str(hh) or '7' in str(mm):\n        break\n    mm -= x\n    if mm < 0:\n        mm += 60\n        hh -= 1\n    if hh < 0:\n        hh += 24\n    count += 1\n    \nprint(count)"
 ],
 "5": [
  "n, pos, l, r = map(int, input().split())\nif l == 1 and r == n:\n    print(0)\nelif l == 1:\n    print(abs(r - pos) + 1)\nelif r == n:\n    print(abs(l - pos) + 1)\nelse:\n    ans = min(abs(pos - l), abs(pos - r)) + r - l + 2\n    ans = min(ans, abs(pos - l) + r - l + abs(pos - r) + 2)\n    print(ans)"
 ],
 "6": [
  "import math\nt = int(input())\nfor _ in range(t):\n    n,x = map(int,input().split())\n    dp = [0] + [math.inf] * x\n    for _ in range(n):\n        d,h = map(int,input().split())\n        for i in range(x,d-1,-1):\n            dp[i] = min(dp[i],dp[i-d]+1)\n        for i in range(min(d-1,x)):\n            dp[i] = min(dp[i],1)\n        for i in range(x-d+1,x):\n            dp[i] = min(dp[i], dp[i-d] +1 if dp[i-d] != math.inf else math.inf)\n        for i in range(x+1, x+h):\n            dp[i] = min(dp[i], dp[x] + 1)\n        x += h - d + 1\n    print(dp[x] if dp[x] != math.inf else -1)"
 ],
 "7": [
  "n, m = map(int, input().split())\n\nl, r = 1, n\nans = -1\nwhile l <= r:\n    mid = (l + r) // 2\n    cur_grain = (mid * (mid + 1)) // 2\n    cur_grain = min(cur_grain, n)\n    occupied_grain = cur_grain + (mid - 1) * m\n    if occupied_grain < n:\n        ans = mid\n        l = mid + 1\n    else:\n        r = mid - 1\n\nprint([str(ans)]) # print the answer in correct format without the nested list"
 ],
 "8": [
  "from collections import Counter\n\ntiles = input().split()\n\n# Count how many tiles of each type we have\ncounts = Counter(t[1] for t in tiles)\n\n# Count how many tiles of each suit we have\nsuits = Counter(t[0] for t in tiles)\n\n# Iterate over all possible sets of 3 tiles and check if they form a mentsu\nfoundMentsu = False\nfor suit in \"mps\":\n    for num in range(1, 8):\n        if suits[str(num)] >= 1 and suits[str(num+1)] >= 1 and suits[str(num+2)] >= 1 and counts[suit] >= 3:\n            foundMentsu = True\n\n# If we found a mentsu already, we don't need to draw any extra tiles\nif foundMentsu:\n    print(0)\n    exit()\n\n# Iterate over all possible pairs of tiles and check if they form a koutsu\nfoundKoutsu = False\nfor tile in set(tiles):\n    if counts[tile[1]] >= 3:\n        foundKoutsu = True\n\n# If we found a koutsu already, we can draw 1 extra tile to form a mentsu\nif foundKoutsu:\n    print(1)\n    exit()\n\n# If we haven't found a mentsu or a koutsu yet, we need to draw 2 extra tiles to form a shuntsu\nprint(2)"
 ],
 "9": [
  "n = int(input())\ns=[]\nfor i in range(n):\n    a,b,c,d=map(int, input().split())\n    t=[a,b,c,d,i+1]\n    s.append(t)\n    \ns.sort(key=lambda x: (x[1],x[0]))\nfor i in range(n):\n    t=s[i]\n    s[i][0]=i+1\n    if (i!=0) and (s[i][1]==s[i-1][1]):\n        s[i][4]=s[i-1][4]\n        \ns.sort(key=lambda x: (x[2],x[3]))\nfor i in range(n):\n    t=s[i]\n    s[i][1]=i+1\n    if (i!=0) and (s[i][2]==s[i-1][2]):\n        s[i][4]=s[i-1][4]\n        \nans=-1\ncc=0\nl,r,t,b=map(int, input().split())\nfor i in range(n):\n    if (s[i][0]-1) == l and (s[i][1]-1) == t and (r-(s[i][0]-1)-2) == s[i][3] and (b-(s[i][1]-1)-2) == s[i][2]:\n        cc+=1\n        ans=s[i][4]\nif cc!=1:\n    ans=-1\n\nprint(ans)"
 ]
}
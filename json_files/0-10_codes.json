{
 "0": [
  "s = input()\nopening = s.find('[')   # Returns the index of first occurence of '[' in s\nclosing = s.rfind(']') # Returns the index of last occurence of ']' in s\n\nif opening == -1 or closing == -1 or opening > closing: # Accordion not possible\n    print(-1)\n    exit()\n\ns = s[opening:closing+1]\nleft_colon = s.find(':')     # find the index of first \":\" in s\nright_colon = s.rfind(':')   # find the index of last \":\" in s\n\nif left_colon == -1 or right_colon == -1 or right_colon <= left_colon:  # Accordion not possible\n    print(-1)\n    exit()\n\nlength = s[left_colon:right_colon].count('|') + 4   # calculate length of accordion and print it\nprint(length)"
 ],
 "1": [
  "x = int(input())\n\ndef digit_sum(n):\n    return sum(int(digit) for digit in str(n))\n\nmax_sum = 0\nmax_num = 0\n\nfor i in range(x, max(x-81, 0), -1):\n    curr_sum = digit_sum(i)\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n        max_num = i\n\nprint(max_num)"
 ],
 "2": [
  "n = int(input())\nwhile True:\n    n += 1\n    if str(n).count('0') + str(n).count('1') == len(str(n)):\n        print(n - int(input()))\n        break"
 ],
 "3": [
  "n, q = map(int, input().split())\npainters = []\nfor _ in range(q):\n    l, r = map(int, input().split())\n    painters.append((l, r))\n\nmax_painted = 0\n\nfor i in range(q):\n    for j in range(i + 1, q):\n        painted = set()\n        for k in range(q):\n            if k == i or k == j:\n                continue\n            for x in range(painters[k][0], painters[k][1] + 1):\n                painted.add(x)\n        max_painted = max(max_painted, len(painted))\n\nprint(max_painted)"
 ],
 "4": [
  "x = int(input())\nhh, mm = map(int, input().split())\n\ncount = 0\nwhile True:\n    if '7' in str(hh) or '7' in str(mm):\n        break\n    mm -= x\n    if mm < 0:\n        mm += 60\n        hh -= 1\n    if hh < 0:\n        hh += 24\n    count += 1\nprint(count)"
 ],
 "5": [
  "n, pos, l, r = map(int, input().split())\ntime = 0\nif l == 1 and r == n:\n    print(time)\nelif l == 1:\n    time += abs(r-pos) + 1\n    print(time)\nelif r == n:\n    time += abs(pos-l) + 1\n    print(time)\nelif pos >= l and pos <= r:\n    time += min(pos-l, r-pos) + (r-l) + 2\n    print(time)\nelif pos < l:\n    time += (l-pos) + (r-l) + 2\n    print(time)\nelse:\n    time += (pos-r) + (r-l) + 2\n    print(time)"
 ],
 "6": [
  "for _ in range(int(input())):\n    n, x = map(int, input().split())\n    min_blow, cur_x = float(\"inf\"), x\n    for i in range(n):\n        d, h = map(int, input().split())\n        if d >= cur_x:\n            min_blow = 1\n            continue\n        blows = (cur_x - d + h - 1) // h\n        min_blow = min(min_blow, blows + 1)\n    if min_blow == float(\"inf\"):\n        print(-1)\n    else:\n        print(min_blow)"
 ],
 "7": [
  "n,m = map(int, input().split())\n\nleft = 0\nright = 10**18\n\nwhile left < right:\n    mid = (left + right) // 2\n    eaten = mid*(mid+1)//2\n    if n - eaten - min(m*mid, n) <= 0:\n        right = mid\n    else:\n        left = mid+1\n\nprint(right)"
 ],
 "8": [
  "from collections import Counter\n\nsuits = ['m', 'p', 's']\nhand = input().split()\n\n# Count the number of tiles for each suit\ncount = Counter([x[1] for x in hand])\n\n# Check for existing melds\nmelds = 0\nfor suit in suits:\n    tiles = [int(x[0]) for x in hand if x[1] == suit]\n    for tile in range(1, 8):\n        if all(x in tiles for x in [tile, tile+1, tile+2]):\n            melds += 1\n            break\n    for tile in range(1, 10):\n        if tiles.count(tile) >= 3:\n            melds += 1\n            break\n\n# Calculate the number of extra tiles needed\nextra_tiles = 4 - sum(count.values())\nif melds == 0:\n    extra_tiles += 2\nelif melds == 1:\n    extra_tiles += 1\n\nprint(extra_tiles)"
 ],
 "9": [
  "d = int(input())\nn, m = map(int, input().split())\nsofas = []\nfor i in range(d):\n    x1, y1, x2, y2 = map(int, input().split())\n    sx1, sx2, sy1, sy2 = min(x1, x2), max(x1, x2), min(y1, y2), max(y1, y2)\n    sofas.append((sx1, sx2, sy1, sy2))\nl, r, t, b = map(int, input().split())\nfor i in range(d):\n    cnt_l, cnt_r, cnt_t, cnt_b = 0, 0, 0, 0\n    for j in range(d):\n        if i != j:\n            if sofas[i][0] > sofas[j][1]:\n                cnt_l += 1\n            elif sofas[i][1] < sofas[j][0]:\n                cnt_r += 1\n            elif sofas[i][2] > sofas[j][3]:\n                cnt_t += 1\n            elif sofas[i][3] < sofas[j][2]:\n                cnt_b += 1\n    if cnt_l == l and cnt_r == r and cnt_t == t and cnt_b == b:\n        print(i+1)\n        break\nelse:\n    print(-1)"
 ]
}
{
 "0": [
  "\ns = input()\nopening_bracket = s.find('[')\nclosing_bracket = s.rfind(']')\nif opening_bracket == -1 or closing_bracket == -1 or closing_bracket < opening_bracket:\n    print(-1)\nelse:\n    content = s[opening_bracket+1:closing_bracket]\n    first_colon = content.find(':')\n    last_colon = content.rfind(':')\n    if first_colon == -1 or last_colon == -1 or last_colon <= first_colon:\n        print(-1)\n    else:\n        pipes = content[first_colon+1:last_colon].count('|')\n        print(4 + pipes)\n"
 ],
 "1": [
  "\nx = int(input())\ndigit_sum = lambda n: sum(int(d) for d in str(n))\nmax_sum = digit_sum(x)\nans = x\nfor i in range(1, 100):\n    if x < 10*i:\n        break\n    j = x // (10*i)\n    curr_val = j*10*i + i-1\n    if digit_sum(curr_val) > max_sum:\n        max_sum = digit_sum(curr_val)\n        ans = curr_val\nprint(ans)\n"
 ],
 "2": [
  "n = int(input())\nwhile True:\n    n += 1\n    if str(n).count('0') + str(n).count('1') == len(str(n)):\n        print(n - int(input()))\n        break"
 ],
 "3": [
  "\nn, q = map(int, input().split())\npainters = []\nfor i in range(q):\n    painters.append(list(map(int, input().split())))\nmax_painted = 0\nfor i in range(q):\n    for j in range(i+1, q):\n        painted = set()\n        for k in range(q):\n            if k == i or k == j:\n                continue\n            for x in range(painters[k][0], painters[k][1]+1):\n                painted.add(x)\n        max_painted = max(max_painted, len(painted))\nprint(max_painted)\n"
 ],
 "4": [
  "\nx = int(input())\nhh, mm = map(int, input().split())\n\ncnt = 0\nwhile True:\n    if '7' in str(hh) or '7' in str(mm):\n        break\n    mm -= x\n    if mm < 0:\n        mm += 60\n        hh -= 1\n    if hh < 0:\n        hh += 24\n    cnt += 1\n\nprint(cnt)\n"
 ],
 "5": [
  "\nn, pos, l, r = map(int, input().split())\nif l == 1 and r == n:\n    print(0)\nelif l == 1:\n    print(abs(r - pos) + 1)\nelif r == n:\n    print(abs(l - pos) + 1)\nelse:\n    left = abs(pos - l) + r - l + 2\n    right = abs(pos - r) + r - l + 2\n    print(min(left, right))\n"
 ],
 "6": [
  "\nfrom heapq import heappush, heappop\n\ndef min_blows(n, x, blows):\n    q = []\n    for d, h in blows:\n        heappush(q, (-d, h))\n    cnt = 0\n    while q:\n        d, h = heappop(q)\n        d = -d\n        c = min(h, (x+d-1)//d) if d > 0 else 1\n        cnt += c\n        x -= c*d\n        if x <= 0:\n            return cnt\n        heappush(q, (-d, h+c))\n    return -1\n\nfor _ in range(int(input())):\n    n, x = map(int, input().split())\n    blows = [list(map(int, input().split())) for _ in range(n)]\n    print(min_blows(n, x, blows))\n"
 ],
 "7": [
  "n,m=map(int,input().split())\nl,r,ans=1,n,0\nwhile l<=r:\n    mid=(l+r)//2\n    tot=(mid*(mid+1))//2\n    if tot>=n-mid*m:\n        ans=mid\n        r=mid-1\n    else:\n        l=mid+1\nprint(ans+m)"
 ],
 "8": [
  "\nfrom collections import defaultdict\n\ntiles = input().split()\n\nsuit_count = defaultdict(int)\nfor tile in tiles:\n    suit_count[tile[1]] += 1\n\nextra_tiles_needed = float('inf')\nfor suit in 'mps':\n    for num in range(1, 8):\n        consecutive_suits = ''.join([str(num + i) + suit for i in range(3)])\n        koutsu_needed = False\n        if suit_count[suit + str(num)] >= 2:\n            koutsu_needed = True\n        if all([suit_count[c] >= 1 for c in consecutive_suits]) and not koutsu_needed:\n            extra_tiles_needed = 0\n            break\n        if all([suit_count[c] >= 2 for c in consecutive_suits]) and koutsu_needed:\n            extra_tiles_needed = 0\n            break\n        extra_tiles_needed = min(extra_tiles_needed, max(0, 2 - suit_count[suit + str(num)]))\n\nprint(extra_tiles_needed)\n"
 ],
 "9": [
  "\nd = int(input())\nn, m = map(int, input().split())\n\nleft_cover = [[] for _ in range(n)]\nright_cover = [[] for _ in range(n)]\ntop_cover = [[] for _ in range(m)]\nbottom_cover = [[] for _ in range(m)]\n\nfor i in range(d):\n    x1, y1, x2, y2 = map(int, input().split())\n    x1, y1, x2, y2 = x1-1, y1-1, x2-1, y2-1\n    \n    if x1 == x2:\n        for j in range(min(y1, y2), max(y1, y2)):\n            left_cover[x1].append(i+1)\n            right_cover[x1].append(i+1)\n            top_cover[j].append(i+1)\n            bottom_cover[j+1].append(i+1)\n    else:\n        for j in range(min(x1, x2), max(x1, x2)):\n            left_cover[j].append(i+1)\n            right_cover[j+1].append(i+1)\n            top_cover[y1].append(i+1)\n            bottom_cover[y1].append(i+1)\n\nleft_count, right_count, top_count, bottom_count = map(int, input().split())\n    \nfor i in range(d):\n    if len(left_cover[x] <= left_count and len(right_cover[x]) <= right_count and len(top_cover[y]) <= top_count and len(bottom_cover[y]) <= bottom_count):\n        print(i+1)\n        break\nelse:\n    print(-1)\n"
 ]
}